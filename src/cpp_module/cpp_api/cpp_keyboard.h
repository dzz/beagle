#ifndef BGLPP_API_KEYBOARD
#define BGLPP_API_KEYBOARD

#define BPP_KEYBOARD_BACKEND_SDL

#include <functional>

namespace bgl {

#ifdef BPP_KEYBOARD_BACKEND_SDL
#include <SDL_keycode.h>
enum keys {
    kc_unknown=    SDLK_UNKNOWN,
    kc_return=    SDLK_RETURN,
    kc_escape=    SDLK_ESCAPE,
    kc_backspace=    SDLK_BACKSPACE,
    kc_tab=    SDLK_TAB,
    kc_space=    SDLK_SPACE,
    kc_exclaim=    SDLK_EXCLAIM,
    kc_quotedbl=    SDLK_QUOTEDBL,
    kc_hash=    SDLK_HASH,
    kc_percent=    SDLK_PERCENT,
    kc_dollar=    SDLK_DOLLAR,
    kc_ampersand=    SDLK_AMPERSAND,
    kc_quote=    SDLK_QUOTE,
    kc_leftparen=    SDLK_LEFTPAREN,
    kc_rightparen=    SDLK_RIGHTPAREN,
    kc_asterisk=    SDLK_ASTERISK,
    kc_plus=    SDLK_PLUS,
    kc_comma=    SDLK_COMMA,
    kc_minus=    SDLK_MINUS,
    kc_period=    SDLK_PERIOD,
    kc_slash=    SDLK_SLASH,
    kc_0=    SDLK_0,
    kc_1=    SDLK_1,
    kc_2=    SDLK_2,
    kc_3=    SDLK_3,
    kc_4=    SDLK_4,
    kc_5=    SDLK_5,
    kc_6=    SDLK_6,
    kc_7=    SDLK_7,
    kc_8=    SDLK_8,
    kc_9=    SDLK_9,
    kc_colon=    SDLK_COLON,
    kc_semicolon=    SDLK_SEMICOLON,
    kc_less=    SDLK_LESS,
    kc_equals=    SDLK_EQUALS,
    kc_greater=    SDLK_GREATER,
    kc_question=    SDLK_QUESTION,
    kc_at=    SDLK_AT,
    kc_leftbracket=    SDLK_LEFTBRACKET,
    kc_backslash=    SDLK_BACKSLASH,
    kc_rightbracket=    SDLK_RIGHTBRACKET,
    kc_caret=    SDLK_CARET,
    kc_underscore=    SDLK_UNDERSCORE,
    kc_backquote=    SDLK_BACKQUOTE,
    kc_a=    SDLK_a,
    kc_b=    SDLK_b,
    kc_c=    SDLK_c,
    kc_d=    SDLK_d,
    kc_e=    SDLK_e,
    kc_f=    SDLK_f,
    kc_g=    SDLK_g,
    kc_h=    SDLK_h,
    kc_i=    SDLK_i,
    kc_j=    SDLK_j,
    kc_k=    SDLK_k,
    kc_l=    SDLK_l,
    kc_m=    SDLK_m,
    kc_n=    SDLK_n,
    kc_o=    SDLK_o,
    kc_p=    SDLK_p,
    kc_q=    SDLK_q,
    kc_r=    SDLK_r,
    kc_s=    SDLK_s,
    kc_t=    SDLK_t,
    kc_u=    SDLK_u,
    kc_v=    SDLK_v,
    kc_w=    SDLK_w,
    kc_x=    SDLK_x,
    kc_y=    SDLK_y,
    kc_z=    SDLK_z,
    kc_capslock=    SDLK_CAPSLOCK,
    kc_f1=    SDLK_F1,
    kc_f2=    SDLK_F2,
    kc_f3=    SDLK_F3,
    kc_f4=    SDLK_F4,
    kc_f5=    SDLK_F5,
    kc_f6=    SDLK_F6,
    kc_f7=    SDLK_F7,
    kc_f8=    SDLK_F8,
    kc_f9=    SDLK_F9,
    kc_f10=    SDLK_F10,
    kc_f11=    SDLK_F11,
    kc_f12=    SDLK_F12,
    kc_printscreen=    SDLK_PRINTSCREEN,
    kc_scrolllock=    SDLK_SCROLLLOCK,
    kc_pause=    SDLK_PAUSE,
    kc_insert=    SDLK_INSERT,
    kc_home=    SDLK_HOME,
    kc_pageup=    SDLK_PAGEUP,
    kc_delete=    SDLK_DELETE,
    kc_end=    SDLK_END,
    kc_pagedown=    SDLK_PAGEDOWN,
    kc_right=    SDLK_RIGHT,
    kc_left=    SDLK_LEFT,
    kc_down=    SDLK_DOWN,
    kc_up=    SDLK_UP,
    kc_numlockclear=    SDLK_NUMLOCKCLEAR,
    kc_kp_divide=    SDLK_KP_DIVIDE,
    kc_kp_multiply=    SDLK_KP_MULTIPLY,
    kc_kp_minus=    SDLK_KP_MINUS,
    kc_kp_plus=    SDLK_KP_PLUS,
    kc_kp_enter=    SDLK_KP_ENTER,
    kc_kp_1=    SDLK_KP_1,
    kc_kp_2=    SDLK_KP_2,
    kc_kp_3=    SDLK_KP_3,
    kc_kp_4=    SDLK_KP_4,
    kc_kp_5=    SDLK_KP_5,
    kc_kp_6=    SDLK_KP_6,
    kc_kp_7=    SDLK_KP_7,
    kc_kp_8=    SDLK_KP_8,
    kc_kp_9=    SDLK_KP_9,
    kc_kp_0=    SDLK_KP_0,
    kc_kp_period=    SDLK_KP_PERIOD,
    kc_application=    SDLK_APPLICATION,
    kc_power=    SDLK_POWER,
    kc_kp_equals=    SDLK_KP_EQUALS,
    kc_f13=    SDLK_F13,
    kc_f14=    SDLK_F14,
    kc_f15=    SDLK_F15,
    kc_f16=    SDLK_F16,
    kc_f17=    SDLK_F17,
    kc_f18=    SDLK_F18,
    kc_f19=    SDLK_F19,
    kc_f20=    SDLK_F20,
    kc_f21=    SDLK_F21,
    kc_f22=    SDLK_F22,
    kc_f23=    SDLK_F23,
    kc_f24=    SDLK_F24,
    kc_execute=    SDLK_EXECUTE,
    kc_help=    SDLK_HELP,
    kc_menu=    SDLK_MENU,
    kc_select=    SDLK_SELECT,
    kc_stop=    SDLK_STOP,
    kc_again=    SDLK_AGAIN,
    kc_undo=    SDLK_UNDO,
    kc_cut=    SDLK_CUT,
    kc_copy=    SDLK_COPY,
    kc_paste=    SDLK_PASTE,
    kc_find=    SDLK_FIND,
    kc_mute=    SDLK_MUTE,
    kc_volumeup=    SDLK_VOLUMEUP,
    kc_volumedown=    SDLK_VOLUMEDOWN,
    kc_kp_comma=    SDLK_KP_COMMA,
    kc_kp_equalsas400=    SDLK_KP_EQUALSAS400,
    kc_alterase=    SDLK_ALTERASE,
    kc_sysreq=    SDLK_SYSREQ,
    kc_cancel=    SDLK_CANCEL,
    kc_clear=    SDLK_CLEAR,
    kc_prior=    SDLK_PRIOR,
    kc_return2=    SDLK_RETURN2,
    kc_separator=    SDLK_SEPARATOR,
    kc_out=    SDLK_OUT,
    kc_oper=    SDLK_OPER,
    kc_clearagain=    SDLK_CLEARAGAIN,
    kc_crsel=    SDLK_CRSEL,
    kc_exsel=    SDLK_EXSEL,
    kc_kp_00=    SDLK_KP_00,
    kc_kp_000=    SDLK_KP_000,
    kc_thousandsseparator=    SDLK_THOUSANDSSEPARATOR,
    kc_decimalseparator=    SDLK_DECIMALSEPARATOR,
    kc_currencyunit=    SDLK_CURRENCYUNIT,
    kc_currencysubunit=    SDLK_CURRENCYSUBUNIT,
    kc_kp_leftparen=    SDLK_KP_LEFTPAREN,
    kc_kp_rightparen=    SDLK_KP_RIGHTPAREN,
    kc_kp_leftbrace=    SDLK_KP_LEFTBRACE,
    kc_kp_rightbrace=    SDLK_KP_RIGHTBRACE,
    kc_kp_tab=    SDLK_KP_TAB,
    kc_kp_backspace=    SDLK_KP_BACKSPACE,
    kc_kp_a=    SDLK_KP_A,
    kc_kp_b=    SDLK_KP_B,
    kc_kp_c=    SDLK_KP_C,
    kc_kp_d=    SDLK_KP_D,
    kc_kp_e=    SDLK_KP_E,
    kc_kp_f=    SDLK_KP_F,
    kc_kp_xor=    SDLK_KP_XOR,
    kc_kp_power=    SDLK_KP_POWER,
    kc_kp_percent=    SDLK_KP_PERCENT,
    kc_kp_less=    SDLK_KP_LESS,
    kc_kp_greater=    SDLK_KP_GREATER,
    kc_kp_ampersand=    SDLK_KP_AMPERSAND,
    kc_kp_dblampersand=    SDLK_KP_DBLAMPERSAND,
    kc_kp_verticalbar=    SDLK_KP_VERTICALBAR,
    kc_kp_dblverticalbar=    SDLK_KP_DBLVERTICALBAR,
    kc_kp_colon=    SDLK_KP_COLON,
    kc_kp_hash=    SDLK_KP_HASH,
    kc_kp_space=    SDLK_KP_SPACE,
    kc_kp_at=    SDLK_KP_AT,
    kc_kp_exclam=    SDLK_KP_EXCLAM,
    kc_kp_memstore=    SDLK_KP_MEMSTORE,
    kc_kp_memrecall=    SDLK_KP_MEMRECALL,
    kc_kp_memclear=    SDLK_KP_MEMCLEAR,
    kc_kp_memadd=    SDLK_KP_MEMADD,
    kc_kp_memsubtract=    SDLK_KP_MEMSUBTRACT,
    kc_kp_memmultiply=    SDLK_KP_MEMMULTIPLY,
    kc_kp_memdivide=    SDLK_KP_MEMDIVIDE,
    kc_kp_plusminus=    SDLK_KP_PLUSMINUS,
    kc_kp_clear=    SDLK_KP_CLEAR,
    kc_kp_clearentry=    SDLK_KP_CLEARENTRY,
    kc_kp_binary=    SDLK_KP_BINARY,
    kc_kp_octal=    SDLK_KP_OCTAL,
    kc_kp_decimal=    SDLK_KP_DECIMAL,
    kc_kp_hexadecimal=    SDLK_KP_HEXADECIMAL,
    kc_lctrl=    SDLK_LCTRL,
    kc_lshift=    SDLK_LSHIFT,
    kc_lalt=    SDLK_LALT,
    kc_lgui=    SDLK_LGUI,
    kc_rctrl=    SDLK_RCTRL,
    kc_rshift=    SDLK_RSHIFT,
    kc_ralt=    SDLK_RALT,
    kc_rgui=    SDLK_RGUI,
    kc_mode=    SDLK_MODE,
    kc_audionext=    SDLK_AUDIONEXT,
    kc_audioprev=    SDLK_AUDIOPREV,
    kc_audiostop=    SDLK_AUDIOSTOP,
    kc_audioplay=    SDLK_AUDIOPLAY,
    kc_audiomute=    SDLK_AUDIOMUTE,
    kc_mediaselect=    SDLK_MEDIASELECT,
    kc_www=    SDLK_WWW,
    kc_mail=    SDLK_MAIL,
    kc_calculator=    SDLK_CALCULATOR,
    kc_computer=    SDLK_COMPUTER,
    kc_ac_search=    SDLK_AC_SEARCH,
    kc_ac_home=    SDLK_AC_HOME,
    kc_ac_back=    SDLK_AC_BACK,
    kc_ac_forward=    SDLK_AC_FORWARD,
    kc_ac_stop=    SDLK_AC_STOP,
    kc_ac_refresh=    SDLK_AC_REFRESH,
    kc_ac_bookmarks=    SDLK_AC_BOOKMARKS,
    kc_brightnessdown=    SDLK_BRIGHTNESSDOWN,
    kc_brightnessup=    SDLK_BRIGHTNESSUP,
    kc_displayswitch=    SDLK_DISPLAYSWITCH,
    kc_kbdillumtoggle=    SDLK_KBDILLUMTOGGLE,
    kc_kbdillumdown=    SDLK_KBDILLUMDOWN,
    kc_kbdillumup=    SDLK_KBDILLUMUP,
    kc_eject=    SDLK_EJECT,
    kc_sleep=    SDLK_SLEEP,
};
#endif

    namespace keyboard {
        void register_keydown_handler( unsigned int key, std::function<void()> handler );
        void register_keyup_handler( unsigned int key, std::function<void()> handler );
        void register_keyhandler_pair( unsigned int key, std::function<void()> down_handler, std::function<void()> up_handler );
        bool is_key_down( unsigned int key );
        void _dispatch_keyup( unsigned int key);
        void _dispatch_keydown( unsigned int key );
    }
}

#endif
